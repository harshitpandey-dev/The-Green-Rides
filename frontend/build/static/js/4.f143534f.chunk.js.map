{"version":3,"sources":["components/auth/AuthForm.module.css","components/auth/AuthForm.js","pages/AuthPage.js"],"names":["module","exports","AuthForm","history","useHistory","useState","isVerified","setIsVerified","showPassword","setShowPassword","authCtx","useContext","AuthContext","emailInputRef","useRef","passwordInputRef","isLoading","setIsLoading","className","classes","auth","onSubmit","event","preventDefault","enteredEmail","current","value","enteredPassword","fetch","method","body","JSON","stringify","email","password","headers","then","res","ok","json","data","errorMessage","error","message","Error","experationTime","Date","getTime","login","token","_id","role","cycleid","toISOString","replace","catch","err","alert","control","htmlFor","type","id","required","ref","onClick","sitekey","onChange","actions","push","AuthPage"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,2B,uGC2IlHC,EArIE,WACf,IAAMC,EAAUC,cAEhB,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EAAUC,qBAAWC,KAErBC,EAAgBC,mBAChBC,EAAmBD,mBAEzB,EAAkCT,oBAAS,GAA3C,mBAAOW,EAAP,KAAkBC,EAAlB,KAiFA,OACE,0BAASC,UAAWC,IAAQC,KAA5B,UACE,uCACA,uBAAMC,SAjEe,SAACC,GAGxB,GAFAA,EAAMC,iBAEFjB,EAAY,CACd,IAAMkB,EAAeX,EAAcY,QAAQC,MACrCC,EAAkBZ,EAAiBU,QAAQC,MAEjDT,GAAa,GAGP,kDAENW,MAFM,kDAEK,CACTC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOT,EACPU,SAAUP,IAEZQ,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAEL,OADApB,GAAa,GACToB,EAAIC,GACCD,EAAIE,OAEJF,EAAIE,OAAOH,MAAK,SAACI,GACtB,IAAIC,EAAe,wBAKnB,MAJID,GAAQA,EAAKE,OAASF,EAAKE,MAAMC,UACnC1B,GAAa,GACbwB,EAAeD,EAAKE,MAAMC,SAEtB,IAAIC,MAAMH,SAIrBL,MAAK,SAACI,GACL,IAAMK,EAAiB,IAAIC,MAAK,IAAIA,MAAOC,UAAY,MACvDrC,EAAQsC,MACNR,EACAb,EACAa,EAAKS,MACLT,EAAKU,IACLV,EAAKW,KACLX,EAAKY,QACLP,EAAeQ,eAEjBlD,EAAQmD,QAAQ,QAEjBC,OAAM,SAACC,GACNC,MAAMD,EAAIb,iBAGdc,MAAM,4BAWN,UACE,sBAAKvC,UAAWC,IAAQuC,QAAxB,UACE,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,KAAK,WAAWC,GAAG,WAAWC,UAAQ,EAACC,IAAKlD,OAErD,sBAAKK,UAAWC,IAAQuC,QAAxB,UACE,uBAAOC,QAAQ,WAAf,2BACA,uBACEC,KAAMpD,EAAe,OAAS,WAC9BqD,GAAG,WACHC,UAAQ,EACRC,IAAKhD,OAGT,uBAAO6C,KAAK,WAAWI,QApFF,WACrBxD,GAAcC,GAAgB,GAC7BD,GAAcC,GAAgB,MAoEjC,iBAeE,8BAOE,cAAC,IAAD,CACEwD,QAAQ,2CACRC,SA1GV,SAAkBxC,GAChBnB,GAAc,QA4GV,sBAAKW,UAAWC,IAAQgD,QAAxB,WACInD,GAAa,2CACdA,GAAa,0DAGlB,qBAAKE,UAAWC,IAAQgD,QAAxB,SACE,wBAAQH,QAxCQ,WACpB7D,EAAQiE,KAAK,YAuCT,4BC5HOC,UARE,WACf,OACE,mCACE,cAAC,EAAD","file":"static/js/4.f143534f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__2ZSKH\",\"control\":\"AuthForm_control__1evQ4\",\"actions\":\"AuthForm_actions__25Vmz\",\"toggle\":\"AuthForm_toggle__1Wxr6\"};","import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n\n  const [isVerified, setIsVerified] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  function onChange(value) {\n    setIsVerified(true);\n    // console.log('Captcha value:', value);\n  }\n\n  // const verifyCallback = () => {\n  //   setIsVerified(true);\n  // };\n  // const load = () => {\n  //   setIsVerified(false);\n  // };\n\n  const toggleShowPassword = () => {\n    if (showPassword) setShowPassword(false);\n    if (!showPassword) setShowPassword(true);\n  };\n\n  const submitionHandler = (event) => {\n    event.preventDefault();\n\n    if (isVerified) {\n      const enteredEmail = emailInputRef.current.value;\n      const enteredPassword = passwordInputRef.current.value;\n\n      setIsLoading(true);\n\n      let url;\n      url = 'https://cycle-api.azurewebsites.net/users/login'; //login send req url\n\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          setIsLoading(false);\n          if (res.ok) {\n            return res.json();\n          } else {\n            return res.json().then((data) => {\n              let errorMessage = 'Authentication Failed';\n              if (data && data.error && data.error.message) {\n                setIsLoading(false);\n                errorMessage = data.error.message;\n              }\n              throw new Error(errorMessage);\n            });\n          }\n        })\n        .then((data) => {\n          const experationTime = new Date(new Date().getTime() + +36000000);\n          authCtx.login(\n            data,\n            enteredPassword,\n            data.token,\n            data._id,\n            data.role,\n            data.cycleid,\n            experationTime.toISOString()\n          );\n          history.replace('/');\n        })\n        .catch((err) => {\n          alert(err.message);\n        });\n    } else {\n      alert('Verify if you are human');\n    }\n  };\n\n  const signupHandler = () => {\n    history.push('/signup');\n  };\n\n  return (\n    <section className={classes.auth}>\n      <h1>Login</h1>\n      <form onSubmit={submitionHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"userName\" id=\"userName\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type={showPassword ? 'text' : 'password'}\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <input type=\"checkbox\" onClick={toggleShowPassword} /> Show Password\n        <div>\n          {/* <Recaptcha\n            sitekey=\"6LfOzVQjAAAAACIJVTM3w4iuAePfdEloNCQvRhj-\"\n            render=\"explicit\"\n            verifyCallback={verifyCallback}\n            onloadCallback={load}\n          /> */}\n          <ReCAPTCHA\n            sitekey=\"6LcU0VQjAAAAAHdKzj2Ub7RAbfQCf6QXbgOif9Le\"\n            onChange={onChange}\n          />\n        </div>\n        <div className={classes.actions}>\n          {!isLoading && <button>Login</button>}\n          {isLoading && <p>Sending Request....</p>}\n        </div>\n      </form>\n      <div className={classes.actions}>\n        <button onClick={signupHandler}> Sign Up</button>\n      </div>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/auth/AuthForm';\n\nconst AuthPage = () => {\n  return (\n    <>\n      <AuthForm />\n    </>\n  );\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}